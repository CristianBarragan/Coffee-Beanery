// <auto-generated />
using System;
using Database.Banking;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Banking.Migrations
{
    [DbContext(typeof(BankingDbContext))]
    partial class BankingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entity.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountKey")
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProcessedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("AccountKey")
                        .IsUnique();

                    b.ToTable("Account", "Account");
                });

            modelBuilder.Entity("Database.Entity.ContactPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ContactPointKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ContactPointType")
                        .HasColumnType("integer");

                    b.Property<string>("ContactPointValue")
                        .HasColumnType("text");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CustomerKey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProcessedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("ContactPointKey")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.ToTable("ContactPoint", "Banking");
                });

            modelBuilder.Entity("Database.Entity.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AccountKey")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ContractKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ContractType")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerBankingRelationshipId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CustomerBankingRelationshipKey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProcessedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ContractKey")
                        .IsUnique();

                    b.HasIndex("CustomerBankingRelationshipId");

                    b.ToTable("Contract", "Lending");
                });

            modelBuilder.Entity("Database.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("CustomerType")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProcessedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("CustomerKey")
                        .IsUnique();

                    b.ToTable("Customer", "Banking");
                });

            modelBuilder.Entity("Database.Entity.CustomerBankingRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerBankingRelationshipKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CustomerKey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProcessedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("CustomerBankingRelationshipKey")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBankingRelationship", "Banking");
                });

            modelBuilder.Entity("Database.Entity.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AccountKey")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ContractKey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProcessedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<Guid>("TransactionKey")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractId");

                    b.HasIndex("TransactionKey")
                        .IsUnique();

                    b.ToTable("Transaction", "Lending");
                });

            modelBuilder.Entity("Database.Entity.ContactPoint", b =>
                {
                    b.HasOne("Database.Entity.Customer", "Customer")
                        .WithMany("ContactPoint")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Database.Entity.Contract", b =>
                {
                    b.HasOne("Database.Entity.Account", "Account")
                        .WithOne("Contract")
                        .HasForeignKey("Database.Entity.Contract", "AccountId");

                    b.HasOne("Database.Entity.CustomerBankingRelationship", "CustomerBankingRelationship")
                        .WithMany("Contract")
                        .HasForeignKey("CustomerBankingRelationshipId");

                    b.Navigation("Account");

                    b.Navigation("CustomerBankingRelationship");
                });

            modelBuilder.Entity("Database.Entity.CustomerBankingRelationship", b =>
                {
                    b.HasOne("Database.Entity.Customer", "Customer")
                        .WithMany("CustomerBankingRelationship")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Database.Entity.Transaction", b =>
                {
                    b.HasOne("Database.Entity.Account", "Account")
                        .WithMany("Transaction")
                        .HasForeignKey("AccountId");

                    b.HasOne("Database.Entity.Contract", "Contract")
                        .WithMany("Transaction")
                        .HasForeignKey("ContractId");

                    b.Navigation("Account");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Database.Entity.Account", b =>
                {
                    b.Navigation("Contract");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Database.Entity.Contract", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Database.Entity.Customer", b =>
                {
                    b.Navigation("ContactPoint");

                    b.Navigation("CustomerBankingRelationship");
                });

            modelBuilder.Entity("Database.Entity.CustomerBankingRelationship", b =>
                {
                    b.Navigation("Contract");
                });
#pragma warning restore 612, 618
        }
    }
}
